stages:
  - build
build:
  stage: build
  image: docker:latest
  # only:
  #   - "master"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  before_script:
    - docker version
    - "docker info"
    # - "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
  script:
    - "docker build -f ./tests/Dockerfile.debian -t ${CI_REGISTRY}/${CI_PROJECT_PATH}-debian:latest --pull ."
    # - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}-debian:latest"
    - "docker build -f ./tests/Dockerfile.ubuntu -t ${CI_REGISTRY}/${CI_PROJECT_PATH}-ubuntu:latest --pull ."
    # - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}-ubuntu:latest"
  after_script:
    - "docker image prune -af"
    # - "docker logout ${CI_REGISTRY}"
# deploy:
#   stage: deploy
#   image: gitlab/dind:latest
#   only:
#     - "master"
#   environment: production
#   services:
#     - docker:dind
#   before_script:
#     - mkdir -p ~/.ssh
#     - echo "$DEPLOY_SERVER_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - eval "$(ssh-agent -s)"
#     - ssh-add ~/.ssh/id_rsa
#     - ssh-keyscan -H $DEPLOYMENT_SERVER_IP >> ~/.ssh/known_hosts
#   script:
#     - printf "\nEXAMPLE_ENV=${EXAMPLE_ENV}\n" > .env
#     - scp -r ./.env ./docker-compose.yml user@${DEPLOYMENT_SERVER_IP}:~/
#     - ssh user@$DEPLOYMENT_SERVER_IP "docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY} <<< ${CI_REGISTRY_PASSWORD}; docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest; docker-compose -f docker-compose.yml --project-name=$(date +%s) up --scale next-project=2 -d;"